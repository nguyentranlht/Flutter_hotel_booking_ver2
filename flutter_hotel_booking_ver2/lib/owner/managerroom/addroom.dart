import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hotel_repository/hotel_repository.dart';
import 'package:room_repository/room_repository.dart';
import '../../constants/themes.dart';
import '../../provider/room_provider.dart';

class AddRoomScreen extends ConsumerStatefulWidget {
  final String hotelId;

  const AddRoomScreen({Key? key, required this.hotelId}) : super(key: key);

  @override
  _AddRoomScreenState createState() => _AddRoomScreenState();
}

class _AddRoomScreenState extends ConsumerState<AddRoomScreen> {
  final TextEditingController _roomNameController = TextEditingController();
  final TextEditingController _roomTypeController = TextEditingController();
  final TextEditingController _pricePerNightController =
      TextEditingController();
  final TextEditingController _capacityController = TextEditingController();
  final TextEditingController _maxPeopleController = TextEditingController();
  final TextEditingController _imagePathController = TextEditingController();

  bool _roomStatus = true;

  @override
  void dispose() {
    _roomNameController.dispose();
    _roomTypeController.dispose();
    _pricePerNightController.dispose();
    _capacityController.dispose();
    _maxPeopleController.dispose();
    _imagePathController.dispose();
    super.dispose();
  }

  void _submitRoom() async {
    if (_roomNameController.text.isEmpty ||
        _roomTypeController.text.isEmpty ||
        _pricePerNightController.text.isEmpty ||
        _capacityController.text.isEmpty ||
        _maxPeopleController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please fill all fields')),
      );
      return;
    }

    final room = Room(
      roomId: '', // ID will be generated by Firestore
      roomName: _roomNameController.text,
      hotelId: widget.hotelId,
      imagePath: _imagePathController.text.isNotEmpty
          ? _imagePathController.text
          : null,
      roomType: _roomTypeController.text,
      pricePerNight: _pricePerNightController.text,
      capacity: int.parse(_capacityController.text),
      roomStatus: _roomStatus,
      maxPeople: int.parse(_maxPeopleController.text),
      availableDates: [], // Add logic for available dates if needed
    );

    await ref.read(addRoomProvider.notifier).addRoom(room);

    ref.read(addRoomProvider).when(
          data: (_) {
            Navigator.pop(context);
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Room added successfully')),
            );
          },
          loading: () => ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Adding room...')),
              ),
          error: (error, _) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error: $error')),
            );
          },
        );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Room'),
        backgroundColor: AppTheme.primaryColor,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextField(
                controller: _roomNameController,
                decoration: const InputDecoration(
                  labelText: 'Room Name',
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _roomTypeController,
                decoration: const InputDecoration(
                  labelText: 'Room Type',
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _pricePerNightController,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(
                  labelText: 'Price Per Night',
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _capacityController,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(
                  labelText: 'Capacity',
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _maxPeopleController,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(
                  labelText: 'Max People',
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _imagePathController,
                decoration: const InputDecoration(
                  labelText: 'Image URL',
                ),
              ),
              const SizedBox(height: 16),
              // SwitchListTile(
              //   title: const Text('Room Status'),
              //   value: _roomStatus,
              //   onChanged: (value) {
              //     setState(() {
              //       _roomStatus = value;
              //     });
              //   },
              // ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _submitRoom,
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppTheme.primaryColor,
                ),
                child: const Text('Add Room'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}